@page "/Account/Register"
@layout SignInLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using OlympusBugTracker.Components.Layout
@using OlympusBugTracker.Data
@using OlympusBugTracker.Helpers
@using OlympusBugTracker.Models

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DBContext

<PageTitle>Register</PageTitle>


<div class="d-lg-flex position-relative h-100">

    <!-- Home button -->
    <a class="text-nav btn btn-icon bg-light border rounded-circle position-absolute top-0 end-0 p-0 mt-3 me-3 mt-sm-4 me-sm-4" href="/" data-bs-toggle="tooltip" data-bs-placement="left" title="Back to home" aria-label="Back to home">
        <i class="ai-home"></i>
    </a>

    <!-- Sign up form -->
    <div class="d-flex flex-column align-items-center w-lg-50 h-100 px-3 px-lg-5 pt-5">

        <div class="w-100 mt-auto" style="max-width: 526px;">

            @* <h1>No account? Sign up</h1>

            <p class="pb-3 mb-3 mb-lg-4">Have an account already?&nbsp;&nbsp;<a href="Account/Login">Sign in here!</a></p>

            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" enctype="multipart/form-data" class="needs-validation" novalidate>
                <DataAnnotationsValidator />

                <ValidationSummary class="text-danger" role="alert" />

                <div class="row row-cols-1 row-cols-sm-2">
                    <div class="col mb-4">
                        <InputText @bind-Value="Input.FirstName" autocomplete="firstName" aria-required="true" class="form-control form-control-lg" type="text" placeholder="First Name" required />
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                    <div class="col mb-4">
                        <InputText @bind-Value="Input.LastName" autocomplete="lastName" aria-required="true" class="form-control form-control-lg" type="text" placeholder="Last Name" required />
                    </div>
                </div>

                <div class="mb-4">

                    <InputText @bind-Value="Input.Email" autocomplete="username" aria-required="true" class="form-control form-control-lg" type="email" placeholder="Email address" required />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />

                </div>

                <div class="mb-4">
                    <InputText @bind-Value="Input.Password" autocomplete="new-password" aria-required="true" class="form-control form-control-lg" type="password" placeholder="Password" required />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="mb-4">
                    <InputText @bind-Value="Input.ConfirmPassword" autocomplete="new-password" aria-required="true" class="form-control form-control-lg" type="password" placeholder="Confirm password" required />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <div class="mb-3 row">
                    <div class="col-md-3 text-center overflow-hidden">
                        <img src="@UploadHelper.DefaultProfilePicture" class="img-fluid" id="imagePreview" height="80" />
                    </div>
                    <div class="col-md-9 text-start">

                        <label class="form-label" for="image">Profile Picture</label>

                    </div>
                </div>

                <button class="btn btn-lg btn-primary w-100 mb-4" type="submit">Sign up</button>

            </EditForm> *@

            <h1>Not Authorized</h1>

            <p>You are not authorized to register a company.</p>

            <a href="/">Return Home</a>

        </div>

        <!-- Copyright -->
        <p class="nav w-100 fs-sm pt-5 mt-auto mb-5" style="max-width: 526px;"><span class="text-body-secondary">&copy; All rights reserved. Made by</span><a class="nav-link d-inline-block p-0 ms-1" href="https://rs-developer-portfolio.netlify.app/" target="_blank" rel="noopener">Roman Steele</a></p>
    </div>


    <!-- Cover image -->
    <div class="w-50 bg-size-cover bg-repeat-0 bg-position-center" style="background-image: url(img/pexels-ekaterina-bolovtsova-4680236.jpg);"></div>

</div>

@* <div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" enctype="multipart/form-data">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstName" aria-required="true" placeholder="First Name" />
                <label for="firstName">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastName" aria-required="true" placeholder="Last Name" />
                <label for="lastName">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="mb-3 row">
                <div class="col-md-4 text-center overflow-hidden">
                    <img src="@UploadHelper.DefaultProfilePicture" class="img-fluid" id="imagePreview" height="80" />
                </div>
                <div class="col-md-8">

                    <label class="form-label" for="image">Profile Picture</label>
                    <input type="file" class="form-control" accept=".jpg,.jpeg,.png,.svg,.gif" name="Input.ProfilePicture"
                           onchange="document.getElementById('imagePreview').src = window.URL.createObjectURL(this.files[0])" />

                </div>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div> *@

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }


        if (Input.ProfilePicture != null)
        {

            try
            {

                FileUpload image = await UploadHelper.GetImageUploadAsync(Input.ProfilePicture);

                // Save the image
                await DBContext.Images.AddAsync(image);

                user.ImageId = image.Id;
                DBContext.Users.Update(user);
                await DBContext.SaveChangesAsync();

            }
            catch (Exception)
            {
                Console.WriteLine("Unable to upload user image.");
                throw;
            }

        }


        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(50, ErrorMessage = "The {0} must be at least {2} at most {1} characters long.", MinimumLength = 2)]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "The {0} must be at least {2} at most {1} characters long.", MinimumLength = 2)]
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }

        [Display(Name = "Profile Picture")]
        public IFormFile? ProfilePicture { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
