@implements IDisposable

@inject NavigationManager NavigationManager

<header class="navbar navbar-expand-lg fixed-top bg-light">
    <div class="container">

        <!-- Navbar brand (Logo) -->
        <a class="navbar-brand pe-sm-3" href="/">
            <span class="text-primary flex-shrink-0 me-2">
                <img src="img/LazyBug.svg" class="mainLogo" />
            </span>
            LazyBug
        </a>


        <!-- Mobile menu toggler (Hamburger) -->
        <button class="navbar-toggler ms-sm-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navbar collapse (Main navigation) -->
        <nav class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav navbar-nav-scroll me-auto" style="--ar-scroll-height: 520px;">

                <AuthorizeView>

                    <Authorized>

                        @* <li class="nav-item">
                            <NavLink class="nav-link" href="dashboard" Match="NavLinkMatch.Prefix">Dashboard</NavLink>
                        </li> *@

                        <li class="nav-item">
                            <NavLink class="nav-link" href="company" Match="NavLinkMatch.Prefix">Company</NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="projects" Match="NavLinkMatch.Prefix">Projects</NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="tickets" Match="NavLinkMatch.Prefix">Tickets</NavLink>
                        </li>

                        <li class="nav-item dropdown">

                            <NavLink class="nav-link dropdown-toggle" href="account" Match="NavLinkMatch.Prefix" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                                @(context.User?.Identity?.Name ?? "Account")
                            </NavLink>

                            <ul class="dropdown-menu">

                                <li><a class="dropdown-item" href="Account/Manage">Profile</a></li>

                                <li>

                                    <form class="dropdown-item" action="Account/Logout" method="post">

                                        <AntiforgeryToken />

                                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />

                                        <button type="submit" class="nav-link ps-0">

                                            Logout

                                            <span class="ai ai-user-minus ms-1" aria-hidden="true"></span>

                                        </button>

                                    </form>

                                </li>

                            </ul>

                        </li>

                    </Authorized>

                    <NotAuthorized>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Home</NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Login" Match="NavLinkMatch.All">Login / Demo</NavLink>
                        </li>

                    </NotAuthorized>

                </AuthorizeView>

            </ul>

        </nav>

    </div>

</header>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
