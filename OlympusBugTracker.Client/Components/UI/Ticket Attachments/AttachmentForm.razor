@using Microsoft.AspNetCore.Authorization
@using OlympusBugTracker.Client.Helpers

@inject ITicketDTOService TicketService
@attribute [Authorize]


<AuthorizeView>

    @if (context.User.IsInRole("Admin") || UserInfo?.UserId == ProjectManager?.Id || UserInfo?.UserId == Ticket?.SubmitterUserId || UserInfo?.UserId == Ticket?.DeveloperUserId)
    {
        <hr />

        <h1>Attachments</h1>

        <EditForm Context="editFormContext" Model="attachment" OnValidSubmit="HandleSubmit" class="vstack gap-1">

            <label class="form-label">Make an attachment</label>

            <InputFile OnChange="a => newFile = a.File" />

            <label class="form-label mt-3">Attachment Description</label>

            <InputText @bind-Value="attachment!.Description" class="form-control" placeholder="Description" />

            <button class="btn btn-sm btn-primary">Upload</button>

        </EditForm>

    }

</AuthorizeView>





@code {
    #region parameters

    [Parameter, EditorRequired]
    public int TicketId { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter]
    public EventCallback OnUpload { get; set; }

    [Parameter, EditorRequired]
    public TicketDTO? Ticket { get; set; }

    [Parameter, EditorRequired]
    public UserDTO? ProjectManager { get; set; }

    #endregion


    #region state

    private IBrowserFile? newFile;

    private TicketAttachmentDTO attachment = new();

    #endregion


    #region methods

    protected override void OnInitialized()
    {
        attachment!.UserId = UserInfo!.UserId;
        attachment!.TicketId = TicketId;
    }

    private async Task HandleSubmit()
    {

        if (newFile is not null)
        {

            try
            {
                Stream stream = newFile.OpenReadStream(ImageHelper.MaxFileSize);

                MemoryStream ms = new();

                await stream.CopyToAsync(ms);

                byte[] fileData = ms.ToArray();
                string fileType = newFile.ContentType;

                attachment!.FileName = newFile.Name;

                await TicketService.AddTicketAttachment(attachment, fileData, fileType, UserInfo!.CompanyId);
            }
            catch (Exception ex)
            {
                //error message
                Console.WriteLine(ex);
                throw;
            }

            newFile = null;
            attachment = new()
                {
                    UserId = UserInfo!.UserId,
                    TicketId = TicketId,
                };

            await OnUpload.InvokeAsync();
        }

    }

    #endregion

}
