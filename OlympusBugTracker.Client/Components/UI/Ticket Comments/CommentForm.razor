@inject NavigationManager Nav





@if (Comment is not null)
{

    <AuthorizeView>

        @if (context.User.IsInRole("Admin") || UserInfo?.UserId == ProjectManager?.Id || UserInfo?.UserId == Ticket?.SubmitterUserId || UserInfo?.UserId == Ticket?.DeveloperUserId)
        {

            <h2>Leave a comment</h2>

            <EditForm Context="editFormContext" Model="Comment" OnValidSubmit="HandleSubmit">

                <div class="flex-fill vstack">

                    <TinyMCE.Blazor.Editor ScriptSrc="/tinymce/tinymce.min.js" @bind-Value="Comment.Content" Field="() => Comment.Content" ClassName="rich-text-editor" Conf="editorConfig" />

                    <div class="text-end mt-3">
                        <button class="btn btn-sm btn-primary"><i class="ai ai-circle-check"></i></button>
                    </div>

                </div>


            </EditForm>

        }
        else
        {
            // not authorized to comment
        }

    </AuthorizeView>

}



@code {
    #region parameters

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public TicketCommentDTO? Comment { get; set; }

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public TicketDTO? Ticket { get; set; }

    [Parameter, EditorRequired]
    public UserDTO? ProjectManager { get; set; }

    #endregion


    #region state

    // tinyMCE config
    private static readonly Dictionary<string, object> editorConfig = new()
    {
        { "toolbar", "undo redo | bold italic underline | link codesample " },
        { "plugins", "anchor autolink link charmap preview table codesample" },
        { "default_link_target", "_blank" },
        { "link_assume_external_targets", true },
        { "link_context_toolbar", true },
        { "codesample_languages", new object[] {
                new { text = "HTML/XML", value = "markup" },
                new { text = "JavaScript", value = "javascript" },
                new { text = "CSS", value = "css" },
                new { text = "C#", value = "csharp" },
                new { text = "Razor", value = "razor" },
                new { text = "JSON", value = "json" },
    }
        },
        { "codesample_global_prismjs", true },
        { "promotion", false },
        { "height", "400px" },
    };

    #endregion


    #region methods

    private async Task HandleSubmit()
    {
        await OnSubmit.InvokeAsync(Comment);

        Comment = new();
    }

    #endregion

}

