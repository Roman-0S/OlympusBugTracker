@if (Comment is not null)
{
    @if (Comment.UserId == UserInfo?.UserId)
    {

        @if (status == Status.Viewing)
        {

            <div class="border-bottom py-4 mt-2 mb-4">

                <div class="d-flex align-items-center pb-1 mb-3">

                    <div class="ps-3">

                        <h6 class="mb-0">@Comment.User!.FullName</h6>

                        <span class="fs-sm text-body-secondary">@Comment.Created.ToLocalTime().ToString("g")</span>

                    </div>

                </div>

                <p class="pb-2 mb-0">@((MarkupString)Comment.Content!)</p>

                <div class="hstack justify-content-between">

                    <div class="hstack justify-content-end gap-2">

                        <button class="btn btn-sm btn-primary" @onclick="() => status = Status.Editing"><i class="ai ai-pencil"></i></button>

                        <button class="btn btn-sm btn-outline-danger" @onclick="() => status = Status.Deleting"><i class="ai ai-cross-alt"></i></button>

                    </div>

                </div>

            </div>

        }
        else if (status == Status.Editing)
        {

            <div class="border-bottom py-4 mt-2 mb-4">

                <div class="d-flex align-items-center pb-1 mb-3">

                    <div class="ps-3">

                        <h6 class="mb-0">@Comment.User?.FullName</h6>

                        <div>

                            <span class="fs-sm text-body-secondary">@Comment.Created.ToLocalTime().ToString("g")</span>

                        </div>

                    </div>

                </div>

                <CommentForm OnSubmit="HandleSubmit" Comment="Comment" />

            </div>

        }
        else if (status == Status.Deleting)
        {

            <div class="border-bottom py-4 mt-2 mb-4">

                <div class="d-flex align-items-center pb-1 mb-3">

                    <div class="ps-3">

                        <h6 class="mb-0">@Comment.User?.FullName</h6>

                        <div>

                            <span class="fs-sm text-body-secondary">@Comment.Created.ToLocalTime().ToString("g")</span>

                        </div>

                    </div>

                </div>

                <p class="pb-2 mb-0">@((MarkupString)Comment.Content!)</p>

                <div class="hstack justify-content-between">

                    <div class="hstack justify-content-end gap-2">

                        <button class="btn btn-sm btn-danger" @onclick="HandleDelete">Delete</button>

                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => status = Status.Viewing">Cancel</button>

                    </div>

                </div>

            </div>

        }

    }
    else
    {

        <div class="border-bottom py-4 mt-2 mb-4">

            <div class="d-flex align-items-center pb-1 mb-3">

                <div class="ps-3">

                    <h6 class="mb-0">@Comment.User?.FullName</h6>

                    <div>

                        <span class="fs-sm text-body-secondary">@Comment.Created.ToLocalTime().ToString("g")</span>

                    </div>

                </div>

            </div>

            <p class="pb-2 mb-0">@((MarkupString)Comment.Content!)</p>

        </div>

    }

}



@code {

    #region parameters

    [Parameter, EditorRequired]
    public UserInfo? UserInfo { get; set; }

    [Parameter, EditorRequired]
    public TicketCommentDTO? Comment { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> OnEdit { get; set; }

    #endregion


    #region state

    private enum Status
    {
        Viewing,
        Editing,
        Deleting
    }

    private Status status = Status.Viewing;

    #endregion


    #region methods

    private async Task HandleSubmit(TicketCommentDTO comment)
    {
        await OnEdit.InvokeAsync(comment);

        status = Status.Viewing;
    }

    private async Task HandleDelete()
    {
        await OnDelete.InvokeAsync(Comment!.Id);

        status = Status.Viewing;
    }

    #endregion

}
