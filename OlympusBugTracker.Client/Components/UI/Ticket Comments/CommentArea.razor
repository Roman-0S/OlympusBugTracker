@using OlympusBugTracker.Client.Helpers

@inject ITicketDTOService ticketService
@inject IProjectDTOService ProjectService



@if (Comments is not null)
{

    @if ((Comments.Count() is 0))
    {
        <div class="pt-4 pt-xl-5 mt-4">

            <CommentForm OnSubmit="HandleSubmit" Comment="new TicketCommentDTO()" UserInfo="userInfo" Ticket="ticket" ProjectManager="projectManager" />

            <div>

                <h2 class="h1 py-lg-1 py-xl-3">No comments yet</h2>

            </div>

        </div>

    }
    else
    {

        <!-- Comments -->
        <div class="pt-4 pt-xl-5 mt-4">

            <CommentForm OnSubmit="HandleSubmit" Comment="new TicketCommentDTO()" UserInfo="userInfo" Ticket="ticket" ProjectManager="projectManager" />

            <h2 class="h1 py-lg-1 py-xl-3">@Comments.Count() comments</h2>

            @foreach (TicketCommentDTO comment in Comments)
            {
                <CommentCard Comment="comment" UserInfo="userInfo" OnDelete="HandleDelete" OnEdit="HandleEdit" />
            }

        </div>

    }

}




@code {

    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter, EditorRequired]
    public int TicketId { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<TicketCommentDTO>? Comments { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private TicketDTO? ticket;

    private UserDTO? projectManager;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await ticketService.GetTicketByIdAsync(TicketId, userInfo!.CompanyId);

            projectManager = await ProjectService.GetProjectManagerAsync(ticket!.ProjectId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleSubmit(TicketCommentDTO comment)
    {
        try
        {
            if (userInfo is not null)
            {
                comment.UserId = userInfo.UserId;
                comment.TicketId = TicketId;

                await ticketService.AddCommentAsync(comment, userInfo!.CompanyId);

                Comments = await ticketService.GetTicketCommentsAsync(TicketId, userInfo!.CompanyId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleDelete(int commentId)
    {
        try
        {
            await ticketService.DeleteCommentAsync(commentId, userInfo!.CompanyId);

            Comments = await ticketService.GetTicketCommentsAsync(TicketId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleEdit(TicketCommentDTO comment)
    {
        try
        {
            await ticketService.UpdateCommentAsync(comment, userInfo!.CompanyId, userInfo.UserId);

            Comments = await ticketService.GetTicketCommentsAsync(TicketId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    #endregion

}
