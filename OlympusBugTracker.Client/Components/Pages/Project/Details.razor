@page "/project/{id:int}"
@rendermode InteractiveAuto

@using OlympusBugTracker.Client.Components.UI.Ticket
@using OlympusBugTracker.Client.Helpers
@using static OlympusBugTracker.Client.Models.Enums

@inject IProjectDTOService ProjectService
@inject ITicketDTOService TicketService
@inject ICompanyDTOService CompanyService
@inject NavigationManager Nav



@if (project is not null)
{

    <div class="row">

        <div class="col-md-8 table-responsive">

            <h1>@project.Name</h1>

            <p>@((MarkupString)project.Description!)</p>

            <p>@project.StartDate - @project.EndDate</p>

            <p>@project.Priority</p>

            <hr />

            <h1 class="mt-3">Tickets</h1>

            <div class="hstack gap-2 mb-3">

                @if (!showArchived)
                {

                    <div>

                        <button class="btn btn-outline-primary btn-sm" disabled>
                            Tickets
                        </button>

                        <button class="btn btn-outline-primary btn-sm" @onclick="ShowArchived">
                            Archived Tickets
                        </button>

                    </div>

                }
                else
                {

                    <div>

                        <button class="btn btn-outline-primary btn-sm" @onclick="ShowTickets">
                            Tickets
                        </button>

                        <button class="btn btn-outline-primary btn-sm" disabled>
                            Archived Tickets
                        </button>

                    </div>

                }

            </div>

            @if (!showArchived)
            {

                <h5>All Tickets</h5>

                <table class="table border border-dark">
                    <thead>
                        <tr>
                            <th scope="col">Priority</th>
                            <th scope="col">Title</th>
                            <th scope="col">Type</th>
                            <th scope="col">Project</th>
                            <th scope="col">Status</th>
                            <th scope="col">Created</th>
                            <th scope="col">Updated</th>
                            <th scope="col">Comments</th>
                            <th scope="col" colspan="2" class="text-center">Modify</th>
                        </tr>
                    </thead>
                    <tbody class="table-striped table-hover">

                        @foreach (TicketDTO ticket in project.Tickets)
                        {
                            <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                        }

                    </tbody>

                </table>

            }
            else
            {

                <h5>Archived Tickets</h5>

                <table class="table border border-dark">
                    <thead>
                        <tr>
                            <th scope="col">Priority</th>
                            <th scope="col">Title</th>
                            <th scope="col">Type</th>
                            <th scope="col">Project</th>
                            <th scope="col">Status</th>
                            <th scope="col">Created</th>
                            <th scope="col">Updated</th>
                            <th scope="col">Comments</th>
                            <th scope="col" colspan="2" class="text-center">Modify</th>
                        </tr>
                    </thead>
                    <tbody class="table-striped table-hover">

                        @foreach (TicketDTO ticket in tickets)
                        {
                            <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                        }

                    </tbody>

                </table>

            }

        </div>

        <div class="col-md-4">

            <div class="vstack">

                @foreach (UserDTO member in projectMembers)
                {
                    <p>@member.FullName - @member.Role</p>
                }

            </div>


            <AuthorizeView Roles="Admin">
                <div class="mb-4">

                    <h5>Assign a Project Manager</h5>

                    <p>@projectManager?.FullName</p>

                    <InputSelect @bind-Value="selectedProjectManager">

                        <option value="">Select a Project Manager</option>

                        @foreach (UserDTO projectManager in projectManagers)
                        {
                            <option value="@projectManager.Id">@projectManager.FullName</option>
                        }

                    </InputSelect>

                    <div class="hstack gap-2 ms-2">

                        <button class="btn btn-sm btn-primary ms-2" @onclick="HandleAssign">Save</button>

                        <button class="btn btn-sm btn-ouline-danger" @onclick="RemoveManager">Remove</button>

                    </div>

                </div>



            </AuthorizeView>

            <AuthorizeView Roles="Admin, ProjectManager">

                <div>

                    <h5>Add a Member</h5>

                    <InputSelect @bind-Value="selectedMember">

                        <option value="">Select a Member</option>

                        @foreach (UserDTO member in companyMembers)
                        {
                            bool shouldNotDisplay = projectMembers.Any(pm => pm.Id == member.Id);

                            if (!shouldNotDisplay)
                            {
                                if (member.Role == nameof(Roles.Developer) || member.Role == nameof(Roles.Submitter))
                                {
                                    <option value="@member.Id">@member.FullName - @member.Role</option>
                                }
                            }

                        }

                    </InputSelect>

                    <button class="btn btn-sm btn-primary ms-2" @onclick="HandleAddMember">Save</button>

                    <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#modalId">Remove a Member</button>

                </div>


            </AuthorizeView>

        </div>

    </div>

    <div class="modal fade" id="modalId" tabindex="-1" role="dialog">

        <div class="modal-dialog modal-dialog-centered" role="document">

            <div class="modal-content">

                <div class="modal-header">
                    <h4 class="modal-title">Remove a Member</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <p>Select a member to remove.</p>

                    <InputSelect @bind-Value="selectedMember">

                        <option value="">Select a Member</option>

                        @foreach (UserDTO member in companyMembers)
                        {
                            bool shouldDisplay = projectMembers.Any(pm => pm.Id == member.Id);

                            if (shouldDisplay)
                            {
                                if (member.Role == nameof(Roles.Developer) || member.Role == nameof(Roles.Submitter))
                                {
                                    <option value="@member.Id">@member.FullName - @member.Role</option>
                                }
                            }
                        }

                    </InputSelect>

                    <div class="hstack gap-2 mt-4">

                        <button class="btn btn-sm btn-danger" data-bs-dismiss="modal" @onclick="HandleRemoveMember">Remove Member</button>

                        <button class="btn btn-sm btn-secondary" data-bs-dismiss="modal" aria-label="Close" >Close</button>

                    </div>


                </div>

            </div>

        </div>

    </div>

}




@code {

    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public int Id { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private ProjectDTO? project;

    IEnumerable<UserDTO> projectManagers = [];

    private UserDTO? projectManager;

    private string? selectedProjectManager;

    private IEnumerable<UserDTO> projectMembers = [];

    private IEnumerable<UserDTO> companyMembers = [];

    private string? selectedMember;

    IEnumerable<TicketDTO> tickets = [];

    private bool showArchived;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            project = await ProjectService.GetProjectByIdAsync(Id, userInfo!.CompanyId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);

            projectManagers = await CompanyService.GetUsersInRoleAsync(nameof(Roles.ProjectManager), userInfo!.CompanyId);

            projectManager = await ProjectService.GetProjectManagerAsync(Id, userInfo!.CompanyId);

            companyMembers = await CompanyService.GetCompanyMembersAsync(userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

        if (project is null)
        {
            Nav.NavigateTo("/projects");
        }
    }

    private async Task ShowTickets()
    {
        showArchived = false;

        project = await ProjectService.GetProjectByIdAsync(Id, userInfo!.CompanyId);
    }

    private async Task ShowArchived()
    {
        showArchived = true;

        tickets = await TicketService.GetArchivedTicketsAsync(userInfo!.CompanyId);
    }

    public async Task HandleArchive(int ticketId)
    {
        try
        {
            await TicketService.ArchiveTicketAsync(ticketId, userInfo!.CompanyId);

            await ShowTickets();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            await TicketService.RestoreTicketAsync(ticketId, userInfo!.CompanyId);

            await ShowArchived();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleAssign()
    {
        if (selectedProjectManager is not null)
        {
            await ProjectService.AssignProjectManagerAsync(Id, selectedProjectManager, userInfo!.UserId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);
        }
    }

    private async Task RemoveManager()
    {
        await ProjectService.RemoveProjectManagerAsync(Id, userInfo!.UserId);

        projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);
    }

    private async Task HandleAddMember()
    {
        if (selectedMember is not null)
        {
            await ProjectService.AddMemberToProjectAsync(Id, selectedMember, userInfo!.UserId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);

            selectedMember = null;
        }
    }

    private async Task HandleRemoveMember()
    {
        if (selectedMember is not null)
        {
            await ProjectService.RemoveMemberFromProjectAsync(Id, selectedMember, userInfo!.UserId);

            projectMembers = await ProjectService.GetProjectMembersAsync(Id, userInfo!.CompanyId);

            selectedMember = null;
        }
    }

    #endregion

}
