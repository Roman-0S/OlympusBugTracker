@page "/projects"
@rendermode InteractiveAuto

@using OlympusBugTracker.Client.Helpers
@using OlympusBugTracker.Client.Services.Interfaces

@inject IProjectDTOService ProjectService
@inject NavigationManager Nav

<PageTitle>BugTracker | Projects</PageTitle>


<div>

    @if (!showMember)
    {

        <div class="hstack justify-content-between gap-2 mb-3">

            @if (!showArchived)
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Projects
                    </button>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowArchived">
                        Archived Projects
                    </button>

                </div>

            }
            else
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowProjects">
                        Projects
                    </button>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Archived Projects
                    </button>

                </div>

            }

            <AuthorizeView Roles="Admin, ProjectManager">

                <div>

                    <a href="/project/create" class="btn btn-primary btn-sm">
                        Add Project
                    </a>

                </div>

            </AuthorizeView>


        </div>

        @if (!showArchived)
        {
            <div class="hstack gap-3">

                <h1>Projects</h1>

                @if (userInfo!.Roles.Contains("Admin"))
                {

                }
                else
                {

                    <div class="form-check form-switch">

                        <input type="checkbox" class="form-check-input" role="switch" id="showMemberProjects" @onclick="ShowMemberProjects" />
                        <label class="form-check-label" for="showMemberProjects">My Projects</label>

                    </div>

                }


            </div>

            @if (!(projects.Count() == 0))
            {

                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4 pb-sm-3 pb-md-4 pb-xl-5 mb-5">

                    @foreach (ProjectDTO project in projects)
                    {
                        <ProjectCard Project="project" UserInfo="userInfo" OnArchive="HandleArchive" OnRecover="HandleRecover" />
                    }

                </div>

            }
            else
            {

                <div class="d-flex justify-content-center mt-5">

                    <h5 class="text-secondary-emphasis bolder">There are no current projects.</h5>

                </div>

            }

        }
        else
        {

            <div class="hstack gap-3">

                <h1>Archived Projects</h1>

                @if (userInfo!.Roles.Contains("Admin"))
                {

                }
                else
                {

                    <div class="form-check form-switch">

                        <input type="checkbox" class="form-check-input" role="switch" id="showMemberProjects" @onclick="ShowMemberProjects" />
                        <label class="form-check-label" for="showMemberProjects">My Projects</label>

                    </div>

                }

            </div>

            @if (!(projects.Count() == 0))
            {

                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4 pb-sm-3 pb-md-4 pb-xl-5 mb-5">

                    @foreach (ProjectDTO project in projects)
                    {
                        <ProjectCard Project="project" UserInfo="userInfo" OnRecover="HandleRecover" OnArchive="HandleArchive" />
                    }

                </div>

            }
            else
            {

                <div class="d-flex justify-content-center mt-5">

                    <h5 class="text-secondary-emphasis bolder">There are no archived projects.</h5>

                </div>

            }

        }

    }
    else
    {

        <div class="hstack justify-content-between gap-2 mb-3">

            @if (!showArchived)
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Projects
                    </button>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowArchived">
                        Archived Projects
                    </button>

                </div>

            }
            else
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowProjects">
                        Projects
                    </button>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Archived Projects
                    </button>

                </div>

            }

            <AuthorizeView Roles="ProjectManager">

                <div>

                    <a href="/project/create" class="btn btn-primary btn-sm">
                        Add Project
                    </a>

                </div>

            </AuthorizeView>

        </div>

        @if (!showArchived)
        {
            <div class="hstack gap-3">

                <h1>My Projects</h1>

                <div class="form-check form-switch">

                    <input type="checkbox" class="form-check-input" role="switch" id="showMemberProjects" checked @onclick="ShowMemberProjects" />
                    <label class="form-check-label" for="showMemberProjects">My Projects</label>

                </div>

            </div>

            @if (!(projects.Count() == 0))
            {

                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4 pb-sm-3 pb-md-4 pb-xl-5 mb-5">

                    @foreach (ProjectDTO project in projects)
                    {
                        <ProjectCard Project="project" UserInfo="userInfo" OnArchive="HandleArchive" OnRecover="HandleRecover" />
                    }

                </div>

            }
            else
            {

                <div class="d-flex justify-content-center mt-5">

                    <h5 class="text-secondary-emphasis bolder">You aren't assigned to any ongoing projects.</h5>

                </div>

            }


        }
        else
        {

            <div class="hstack gap-3">

                <h1>My Archived Projects</h1>

                <div class="form-check form-switch">

                    <input type="checkbox" class="form-check-input" role="switch" id="showMemberProjects" checked @onclick="ShowMemberProjects" />
                    <label class="form-check-label" for="showMemberProjects">My Projects</label>

                </div>

            </div>

            @if (!(projects.Count() == 0))
            {

                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4 pb-sm-3 pb-md-4 pb-xl-5 mb-5">

                    @foreach (ProjectDTO project in projects)
                    {
                        <ProjectCard Project="project" UserInfo="userInfo" OnRecover="HandleRecover" OnArchive="HandleArchive" />
                    }

                </div>

            }
            else
            {

                <div class="d-flex justify-content-center mt-5">

                    <h5 class="text-secondary-emphasis bolder">No Archived Projects</h5>

                </div>

            }

        }

    }


</div>


@code {
    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private IEnumerable<ProjectDTO> projects = [];

    private bool showArchived;

    private bool showMember;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            if (userInfo is null) Nav.NavigateTo("/Account/Login");

            if (userInfo!.Roles.Contains("Admin"))
            {
                projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);
            }
            else
            {
                projects = await ProjectService.GetMemberProjectsAsync(userInfo.UserId, userInfo!.CompanyId);

                projects = projects.Where(p => !p.Archived);

                showMember = true;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task ShowProjects()
    {
        showArchived = false;

        if (!showMember)
        {
            projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);
        }
        else
        {
            projects = await ProjectService.GetMemberProjectsAsync(userInfo!.UserId, userInfo!.CompanyId);

            projects = projects.Where(p => !p.Archived);
        }
    }

    private async Task ShowArchived()
    {
        showArchived = true;

        if (!showMember)
        {
            projects = await ProjectService.GetArchivedProjectsAsync(userInfo!.CompanyId);
        }
        else
        {
            projects = await ProjectService.GetMemberProjectsAsync(userInfo!.UserId, userInfo!.CompanyId);

            projects = projects.Where(p => p.Archived);
        }
    }

    private async Task ShowMemberProjects()
    {
        showMember = !showMember;

        if (showMember)
        {

            if (!showArchived)
            {
                projects = await ProjectService.GetMemberProjectsAsync(userInfo!.UserId, userInfo!.CompanyId);

                projects = projects.Where(p => !p.Archived);
            }
            else
            {
                projects = await ProjectService.GetMemberProjectsAsync(userInfo!.UserId, userInfo!.CompanyId);

                projects = projects.Where(p => p.Archived);
            }

        }
        else
        {

            if (!showArchived)
            {
                projects = await ProjectService.GetAllProjectsAsync(userInfo!.CompanyId);
            }
            else
            {
                projects = await ProjectService.GetArchivedProjectsAsync(userInfo!.CompanyId);
            }

        }
    }

    private async Task HandleArchive(int projectId)
    {
        try
        {
            await ProjectService.ArchiveProjectAsync(projectId, userInfo!.CompanyId);

            await ShowProjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleRecover(int projectId)
    {
        try
        {
            await ProjectService.RestoreProjectAsync(projectId, userInfo!.CompanyId);

            await ShowArchived();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    #endregion

}
