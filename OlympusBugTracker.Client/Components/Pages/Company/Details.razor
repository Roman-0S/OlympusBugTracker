@page "/company"
@using OlympusBugTracker.Client.Components.UI.Company
@using OlympusBugTracker.Client.Helpers
@rendermode InteractiveAuto

@inject ICompanyDTOService CompanyService



@if (company is not null)
{
    <div>

        <div class="text-end">

            <a href="/company/edit/@company.Id" class="btn btn-sm btn-outline-primary">Edit Company</a>

        </div>

        <img src="@(string.IsNullOrEmpty(company.ImageURL) ? ImageHelper.DefaultCompanyImage : company.ImageURL)" />

        <div class="vstack gap-3 mt-4">

            <h1>@company.Name</h1>

            <p>@((MarkupString)company.Description!)</p>

            <ul>

                @foreach (UserDTO user in company.Users)
                {
                    <CompanyUserCard User="user" OnSubmit="HandleSubmit" />
                }

            </ul>

        </div>

    </div>
}





@code {

    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private CompanyDTO? company;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        company = await CompanyService.GetCompanyByIdAsync(userInfo!.CompanyId);

        company!.Users = [.. await CompanyService.GetCompanyMembersAsync(userInfo!.CompanyId)];
    }

    private async Task HandleSubmit(UserDTO user)
    {
        if (user is not null)
        {
            try
            {
                await CompanyService.UpdateUserRoleAsync(user, userInfo!.UserId);

                company!.Users = [.. await CompanyService.GetCompanyMembersAsync(userInfo!.CompanyId)];
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                throw;
            }
        }
    }

    #endregion

}
