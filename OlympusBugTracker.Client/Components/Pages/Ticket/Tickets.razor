@page "/tickets"
@rendermode InteractiveAuto

@using OlympusBugTracker.Client.Components.UI.Ticket
@using OlympusBugTracker.Client.Helpers

@inject ITicketDTOService TicketService
@inject NavigationManager Nav


<div>

    @if (isAdmin)
    {

        <div class="hstack justify-content-between gap-2 mb-3">

            @if (!showArchived)
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Tickets
                    </button>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowArchived">
                        Archived Tickets
                    </button>

                </div>

            }
            else
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowTickets">
                        Tickets
                    </button>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Archived Tickets
                    </button>

                </div>

            }

            <div>

                <a href="/ticket/create" class="btn btn-primary btn-sm">
                    Add Ticket
                </a>

            </div>

        </div>

        @if (!showArchived)
        {

            <h1>Tickets</h1>

            <div class="accordion accordion-alt accordion-orders" id="orders">

                @foreach (TicketDTO ticket in tickets)
                {
                    <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                }

            </div>

            @* <table class="table table-bordered table-responsive border border-dark table-striped">
                <thead>
                    <tr>
                        <th scope="col">Priority</th>
                        <th scope="col">Title</th>
                        <th scope="col">Project</th>
                        <th scope="col">Status</th>
                        <th scope="col">Created</th>
                        <th scope="col" colspan="2" class="text-center">Modify</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TicketDTO ticket in tickets)
                    {
                        <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                    }

                </tbody>

            </table> *@

        }
        else
        {

            <h1>Archived Tickets</h1>

            <div class="accordion accordion-alt accordion-orders" id="orders">

                @foreach (TicketDTO ticket in tickets)
                {
                    <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                }

            </div>

            @* <table class="table table-bordered table-responsive border border-dark table-striped">
                <thead>
                    <tr>
                        <th scope="col">Priority</th>
                        <th scope="col">Title</th>
                        <th scope="col">Project</th>
                        <th scope="col">Status</th>
                        <th scope="col">Created</th>
                        <th scope="col" colspan="2" class="text-center">Modify</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TicketDTO ticket in tickets)
                    {
                        <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                    }

                </tbody>

            </table> *@

        }

    }
    else
    {

        <div class="hstack justify-content-between gap-2 mb-3">

            @if (!showArchived)
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Tickets
                    </button>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowArchived">
                        Archived Tickets
                    </button>

                </div>

            }
            else
            {

                <div>

                    <button class="btn btn-outline-primary btn-sm" @onclick="ShowTickets">
                        Tickets
                    </button>

                    <button class="btn btn-outline-primary btn-sm" disabled>
                        Archived Tickets
                    </button>

                </div>

            }

            <div>

                <a href="/ticket/create" class="btn btn-primary btn-sm">
                    Add Ticket
                </a>

            </div>

        </div>

        @if (!showArchived)
        {

            <h1>My Tickets</h1>

            <div class="accordion accordion-alt accordion-orders" id="orders">

                @foreach (TicketDTO ticket in tickets)
                {
                    <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                }

            </div>

            @* <table class="table table-bordered table-responsive border border-dark table-striped">
                <thead>
                    <tr>
                        <th scope="col">Priority</th>
                        <th scope="col">Title</th>
                        <th scope="col">Project</th>
                        <th scope="col">Status</th>
                        <th scope="col">Created</th>
                        <th scope="col" colspan="2" class="text-center">Modify</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TicketDTO ticket in tickets)
                    {
                        <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                    }

                </tbody>

            </table> *@

        }
        else
        {

            <h1>My Archived Tickets</h1>

            <div class="accordion accordion-alt accordion-orders" id="orders">

                @foreach (TicketDTO ticket in tickets)
                {
                    <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                }

            </div>

            @* <table class="table table-bordered table-responsive border border-dark table-striped">
                <thead>
                    <tr>
                        <th scope="col">Priority</th>
                        <th scope="col">Title</th>
                        <th scope="col">Project</th>
                        <th scope="col">Status</th>
                        <th scope="col">Created</th>
                        <th scope="col" colspan="2" class="text-center">Modify</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TicketDTO ticket in tickets)
                    {
                        <TicketRow Ticket="ticket" UserInfo="userInfo" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                    }

                </tbody>

            </table> *@

        }

    }



</div>




@code {

    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private IEnumerable<TicketDTO> tickets = [];

    private bool showArchived;

    private bool isAdmin;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            if (userInfo is null) Nav.NavigateTo("/Account/Login");

            if (userInfo!.Roles.Contains("Admin"))
            {
                isAdmin = true;

                tickets = await TicketService.GetAllTicketsAsync(userInfo!.CompanyId);
            }
            else
            {
                tickets = await TicketService.GetUserTicketsAsync(userInfo!.UserId, userInfo!.CompanyId);
                tickets = tickets.Where(t => !t.Archived);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task ShowTickets()
    {
        showArchived = false;

        if (isAdmin)
        {
            tickets = await TicketService.GetAllTicketsAsync(userInfo!.CompanyId);
        }
        else
        {
            tickets = await TicketService.GetUserTicketsAsync(userInfo!.UserId, userInfo!.CompanyId);
            tickets = tickets.Where(t => !t.Archived);
        }

    }

    private async Task ShowArchived()
    {
        showArchived = true;

        if (isAdmin)
        {
            tickets = await TicketService.GetArchivedTicketsAsync(userInfo!.CompanyId);
        }
        else
        {
            tickets = await TicketService.GetUserTicketsAsync(userInfo!.UserId, userInfo!.CompanyId);
            tickets = tickets.Where(t => t.Archived);
        }

    }

    public async Task HandleArchive(int ticketId)
    {
        try
        {
            await TicketService.ArchiveTicketAsync(ticketId, userInfo!.CompanyId);

            await ShowTickets();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            await TicketService.RestoreTicketAsync(ticketId, userInfo!.CompanyId);

            await ShowArchived();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }


    #endregion

}
