@page "/ticket/{id:int}"
@rendermode InteractiveAuto

@using OlympusBugTracker.Client.Components.UI.Ticket_Attachments
@using OlympusBugTracker.Client.Components.UI.Ticket_Comments
@using OlympusBugTracker.Client.Helpers
@using static OlympusBugTracker.Client.Models.Enums

@inject ITicketDTOService TicketService
@inject IProjectDTOService ProjectService



@if (ticket is not null)
{

    <div class="row">

        <div class="col-md-8">

            <h1>@ticket.Title</h1>

            <p>@((MarkupString)ticket.Description!)</p>

            <p>@ticket.Created - @ticket.Updated</p>

            <p>@ticket.Priority</p>

            <p>@ticket.Status</p>

            <p>@ticket.Type</p>


            <CommentArea Comments="ticket.TicketComments" TicketId="Id" />

        </div>

        <div class="col-md-4">

            <h1>Attachments</h1>

            <div class="mb-5">

                <AttachmentForm TicketId="Id" UserInfo="userInfo" OnUpload="HandleUpload" />

            </div>

            <hr />

            <div class="row mt-5">

                @foreach (TicketAttachmentDTO attachment in ticket.Attachments)
                {
                    <AttachmentCard Attachment="attachment" OnDelete="HandleDelete" />
                }

            </div>

            <div class="mt-4">

                @if (projectManager?.Id == userInfo?.UserId || userInfo!.Roles.Contains("Admin"))
                {

                    <AuthorizeView Roles="Admin, ProjectManager">

                        <h5>Assign a Developer</h5>

                        <p>@ticket.DeveloperUser?.FullName</p>

                        <form @onsubmit="HandleAssign">

                            <InputSelect @bind-Value="ticket.DeveloperUserId">

                                <option value="">Select a Developer</option>

                                @foreach (UserDTO developer in developers)
                                {
                                    if (developer.Role == nameof(Roles.Developer))
                                    {
                                        <option value="@developer.Id">@developer.FullName</option>
                                    }
                                }

                            </InputSelect>

                            <button class="btn btn-sm btn-primary">Assign Developer</button>

                        </form>


                    </AuthorizeView>

                }


            </div>

        </div>

    </div>



}




@code {

    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public int Id { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private TicketDTO? ticket;

    private IEnumerable<UserDTO> developers = [];

    private UserDTO? projectManager;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await TicketService.GetTicketByIdAsync(Id, userInfo!.CompanyId);

            projectManager = await ProjectService.GetProjectManagerAsync(ticket!.ProjectId, userInfo!.CompanyId);

            developers = await ProjectService.GetProjectMembersAsync(ticket!.ProjectId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleUpload()
    {
        try
        {
            ticket = await TicketService.GetTicketByIdAsync(Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleDelete(TicketAttachmentDTO attachment)
    {
        try
        {
            await TicketService.DeleteTicketAttachment(attachment.Id, userInfo!.CompanyId);

            ticket = await TicketService.GetTicketByIdAsync(Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleAssign()
    {
        if (ticket!.DeveloperUserId is not null)
        {
            await TicketService.UpdateTicketAsync(ticket, userInfo!.CompanyId, userInfo!.UserId);

            ticket = await TicketService.GetTicketByIdAsync(Id, userInfo!.CompanyId);
        }
    }

    #endregion

}
