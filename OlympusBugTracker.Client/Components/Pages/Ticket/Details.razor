@page "/ticket/{id:int}"
@using OlympusBugTracker.Client.Components.UI.Ticket_Attachments
@using OlympusBugTracker.Client.Components.UI.Ticket_Comments
@using OlympusBugTracker.Client.Helpers
@rendermode InteractiveAuto

@inject ITicketDTOService ticketService



@if (ticket is not null)
{

    <div class="row">

        <div class="col-md-8">

            <h1>@ticket.Title</h1>

            <p>@((MarkupString)ticket.Description!)</p>

            <p>@ticket.Created - @ticket.Updated</p>

            <p>@ticket.Priority</p>

            <p>@ticket.Status</p>

            <p>@ticket.Type</p>


            <CommentArea Comments="ticket.TicketComments" TicketId="Id" />

        </div>

        <div class="col-md-4">

            <h1>Attachments</h1>

            <div>

                <AttachmentForm Attachment="new TicketAttachmentDTO()" />

            </div>


        </div>

    </div>



}




@code {

    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public int Id { get; set; }

    #endregion


    #region state

    private UserInfo? userInfo;

    private TicketDTO? ticket;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            ticket = await ticketService.GetTicketByIdAsync(Id, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    #endregion

}
